Database Testing

All of the testing is assumed ot be doneo on the localhost server. If you can modify the getConnection function in the DBMarketSegmentTests.java with the desired database host and other authentication details if necessary. 

In order to test the database modules, I created some mock data.
The mock data sits in the Unit Test folder. Each CSV file represents
a table that would exist in the database. Some of these files are the 
input data to the model and others are expected data for certain integration tests.

In order to setup the testing environment, we need to first upload all of these files to the database. Before each file is uploaded to the database, we need to create tables of the same names as each of these files in the database. Follow the dbtables.png file to execute "CREATE TABLE" commands with the proper column names and datatypes for each of the tables. 

The following is an example of the create table command for the attrates.csv table:
CREATE TABLE attrates(seg VARCHAR(10), dem VARCHAR(10), rate REAL);

After creating the tables in the database, run the following SQL command to upload the csv to the database. The following command will not work if the column types are not set correctly or if the table does not exist:

COPY <table_name> FROM '<path_to_table_csv>' CSV HEADER;

The following is an example of the copy command for the attrates.csv table:
COPY attrates FROM '/Users/ribsthakkar/Documents/transport/wrap/src/edu/utexas/wrap/tests/TestData/attrates.csv' CSV HEADER;

After ensuring all of the tables/data is copied to the database. You can run the unit tests.

The following describes the purpose of each table:
fftable_: the precomputed friction factor values based on the given a pktime
skim_: the skim time for each OD pair to be used in determing the friction factor
bPAMap_: The expected values for the balanced PAMap test
uPAMap_: the expected values for the unbalanced PAMap test
*** Note there are no tables for the expected PAMtx yet since the original gravity distributor is still under construction and validation. ***
attrates: The attraction rates of each attribute for each node and market segment
prodrates: the production rates of each attribute for each node and market segment
demdata: The demographic value of each attribute for each node




Database Table Design Choice Explantion:
As you may notice, each of the tables has a suffix with the specified string representation of each market segment. It was organized in such a way to make writing the SQL queries easier and less covulted. Less complexity in the queries -> faster execution of SQL. 
If the data was put together in order to consolidate everything, it could result in many subqueries in each other and result in difficulty maintaining or extending the code.